// Code generated by goctl. DO NOT EDIT.

package version

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	configFieldNames          = builder.RawFieldNames(&Config{})
	configRows                = strings.Join(configFieldNames, ",")
	configRowsExpectAutoSet   = strings.Join(stringx.Remove(configFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	configRowsWithPlaceHolder = strings.Join(stringx.Remove(configFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	configModel interface {
		Insert(ctx context.Context, data *Config) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Config, error)
		Update(ctx context.Context, data *Config) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Config struct {
		Id           int64        `db:"id"`             // 主键
		VersionId    int64        `db:"version_id"`     // 当前版本号ID
		MinVersionId int64        `db:"min_version_id"` // 最低运行版本号ID
		Status       int64        `db:"status"`         // 状态 0 未发布 1 已发布 2 已下线
		Platform     int64        `db:"platform"`       // 平台 1 安卓 2 IOS
		CreatedAt    time.Time    `db:"created_at"`     // 创建时间
		UpdatedAt    sql.NullTime `db:"updated_at"`     // 更新时间
		DeletedAt    sql.NullTime `db:"deleted_at"`
	}
)

func newConfigModel(conn sqlx.SqlConn) *defaultConfigModel {
	return &defaultConfigModel{
		conn:  conn,
		table: "`version_config`",
	}
}

func (m *defaultConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConfigModel) FindOne(ctx context.Context, id int64) (*Config, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", configRows, m.table)
	var resp Config
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigModel) Insert(ctx context.Context, data *Config) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, configRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.VersionId, data.MinVersionId, data.Status, data.Platform, data.DeletedAt)
	return ret, err
}

func (m *defaultConfigModel) Update(ctx context.Context, data *Config) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, configRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.VersionId, data.MinVersionId, data.Status, data.Platform, data.DeletedAt, data.Id)
	return err
}

func (m *defaultConfigModel) tableName() string {
	return m.table
}
